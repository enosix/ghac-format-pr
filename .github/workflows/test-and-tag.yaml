name: Test and Tag
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag Name'
        required: true
        default: 'dev'
        type: choice
        options:
          - 'dev'
          - 'stable'

permissions:
  contents: write
  pull-requests: write

jobs:
  test-and-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create Test PR
        id: test-pr
        uses: actions/github-script@v7
        with:
          script: |
            const testBranch = 'PROD-1234-test-branch-' + Date.now();
            const { data: mainRef } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main'
            });
            
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${testBranch}`,
              sha: mainRef.object.sha
            });
            
            const testContent = `Test file created at ${new Date().toISOString()}`;
            const { data: blob } = await github.rest.git.createBlob({
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: Buffer.from(testContent).toString('base64'),
              encoding: 'base64'
            });
            
            const { data: baseTree } = await github.rest.git.getTree({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tree_sha: mainRef.object.sha
            });
            
            const { data: newTree } = await github.rest.git.createTree({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base_tree: baseTree.sha,
              tree: [{
                path: '.github/test-file.txt',
                mode: '100644',
                type: 'blob',
                sha: blob.sha
              }]
            });
            
            const { data: commit } = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: 'Test commit for JIRA automation',
              tree: newTree.sha,
              parents: [mainRef.object.sha]
            });
            
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${testBranch}`,
              sha: commit.sha
            });
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Test PR for JIRA automation',
              head: testBranch,
              base: 'main',
              body: 'This is a test PR to validate the JIRA automation action.'
            });
            
            core.setOutput('pr_number', pr.number);
            core.setOutput('branch', testBranch);
            return pr.number;
      - name: Test Action
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          jira-base-url: 'https://enosix.atlassian.net'
          ticket-prefix: 'PROD'
          story-needed-label: '[STORY NEEDED]'
          pr-number: ${{ steps.test-pr.outputs.pr_number }}
      - name: Close Test PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = parseInt('${{ steps.test-pr.outputs.pr_number }}');
            const branch = '${{ steps.test-pr.outputs.branch }}';
            
            if (prNumber && branch) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                state: 'closed'
              });
              
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branch}`
              });
            }
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ github.event.inputs.tag }}',
                sha: context.sha,
              })
            } catch (err) {
              console.log(err)
            
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ github.event.inputs.tag }}',
                sha: context.sha,
              })
            }
